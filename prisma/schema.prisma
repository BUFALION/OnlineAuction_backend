
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  hash  String
  salt  String

  firstName String @map("first_name")
  secondName String @map("second_name")
  imageUrl String? @map("image_url")
  phoneNumber String? @map("phone_number")

  favoire Favorite[]
  bids  Bid[]
  notifications Notification[]
  reviews       Review[]


  boughtDeals Deal[] @relation("BuyerRelation")

  companyId Int? 
  company   Company? @relation("CompanyParticipant", fields: [companyId], references: [id])

  createdCompany Company? @relation("CompanyCreator")

  // @@unique([companyId], name: "user_unique_company")
}

model Company {
  id Int     @id @default(autoincrement())
  companyName String @map("company_name")
  createdAt  DateTime @default(now()) @map("created_at")
  imageUrl String    @map("image_url")

  creatorId Int @unique @map("creator_id")
  creator User @relation("CompanyCreator", fields: [creatorId], references: [id])

  participants User[] @relation("CompanyParticipant")
  token InvitationToken[]
  cars Car[]
  soldDeals Deal[]
}

model InvitationToken {
  token      String @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  companyId  Int   
  email      String  
  company    Company @relation(fields: [companyId], references: [id])

  @@map("invitation_token")
}

model Notification {
  id    Int     @id @default(autoincrement())
  title String
  description String

  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  status NotificationStatus  @default(NOT_READING)
  statusInfo NotificationInfo 
}

model Car {
  id            Int          @id @default(autoincrement()) 
  vin           String       @unique
  year          Int
  mileage       Int
  color         String
  engine        String
  photos        String[]
  companyId     Int          @map("company_id")
  company       Company      @relation(fields: [companyId], references: [id])
  generationId  Int          @map("generation_id")
  generation    Generation   @relation(fields: [generationId], references: [id])
  descriptionId Int   @unique
  description   Description  @relation(fields: [descriptionId], references: [id])
  drivetrain    Drivetrain
  type          String
  auction       Auction?
}

model Description {
  id            Int          @id @default(autoincrement()) 
  title         String   
  description   String

  Car Car?
}


model Auction {
  id         Int      @id @default(autoincrement())
  carId      Int      @map("car_id") @unique
  car        Car      @relation(fields: [carId], references: [id])
  dateStart  DateTime @map("date_start")
  dateEnd    DateTime @map("date_end")
  startPrice Int?     @map("start_price") @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  status     AuctionStatus @default(NOT_PLAYED)
  favorite   Favorite[]
  bid        Bid[]
  deal       Deal?
}


model Favorite {
  id        Int      @id @default(autoincrement())
  
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  
  auctionId Int      @map("auction_id")
  auction   Auction  @relation(fields: [auctionId], references: [id])
  
  @@unique([userId, auctionId])
}

model Bid {
  id         Int      @id @default(autoincrement())
  amount     Float

  bidder     User     @relation(fields: [userId], references: [id]) // Связь с пользователем (многие к одному)
  userId     Int      @map("user_id")

  auction    Auction  @relation(fields: [auctionId], references: [id]) // Связь с аукционом (многие к одному)
  auctionId  Int      @map("auction_id")

  createdAt  DateTime @default(now()) @map("created_at")
}

model Make {
  id        Int      @id @default(autoincrement())
  makeName  String   @unique @map("make_name")

  models    Model[] 
}

model Model {
  id      Int    @id @default(autoincrement())
  makeId  Int    @map("make_id")
  make    Make   @relation(fields: [makeId], references: [id]) 

  modelName  String   @map("model_name")
  generation Generation[]
}

model Generation {
  id        Int      @id @default(autoincrement())
  modelId   Int      @map("model_id")
  model     Model    @relation(fields: [modelId], references: [id])
  image     String
  generationName String @map("generation_name")
  generationYear Int @map("generation_year")
  Cars      Car[]
}

model Deal {
  id        Int      @id @default(autoincrement())

  auctionId Int      @unique @map("auction_id")
  auction   Auction  @relation(fields: [auctionId], references: [id])

  companyId   Int      @map("company_id")
  company     Company  @relation(fields: [companyId], references: [id])

  buyerId    Int      @map("buyer_id")
  buyer      User     @relation("BuyerRelation", fields: [buyerId], references: [id])

  createdAt  DateTime @default(now()) @map("created_at")
  paymentAt DateTime? @map("payment_at")
  confirmedAt  DateTime? @map("confirmed_at")
  
  status     DealStatus @default(CREATED)

  price      Int       


  review Review?
  payment   Payment?
  
//  review_id     Int?
//   reviews       Review[]   @relation("DealReviews")
}


model Payment {
  id        Int      @id @default(autoincrement())
  
  url       String   @unique
  dealId    Int      @unique @map("review_id")
  deal      Deal     @relation(fields: [dealId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  status    PaymentStatus @default(PENDING)
}


model Review {
  id        Int      @id @default(autoincrement())

  dealId    Int      @unique @map("review_id")
  deal      Deal     @relation(fields: [dealId], references: [id])

  reviwerId Int      @map("reviewr_id")
  reviewr   User     @relation(fields: [reviwerId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  rating    Int   
  title     String     
  description String

}

enum AuctionStatus {
  NOT_PLAYED
  PLAYED
  CANCELLED
  IN_PROGRESS
}
enum NotificationStatus {
  READING
  NOT_READING
}

enum NotificationInfo {
  WARNING
  ERROR
  SUCCESS
  NEUTRAL
}

enum DealStatus {
  CREATED // продавец подтвержает сделку
  PAID // PAID SKIP
  CONFIRMED // продавец подтвердил сделку оплатить 
  COMPLETED 
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Drivetrain {
  FWD 
  RWD  
  AWD 
  FOURWD  
}